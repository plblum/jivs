import { ValidationServices } from "@plblum/jivs-engine/build/Services/ValidationServices";
import { TextLocalizerService } from '@plblum/jivs-engine/build/Services/TextLocalizerService';
import { DataTypeComparerService } from '@plblum/jivs-engine/build/Services/DataTypeComparerService';
import { DataTypeConverterService } from '@plblum/jivs-engine/build/Services/DataTypeConverterService';
import { DataTypeIdentifierService } from '@plblum/jivs-engine/build/Services/DataTypeIdentifierService';
import { DataTypeFormatterService } from '@plblum/jivs-engine/build/Services/DataTypeFormatterService';
import { DataTypeParserService } from '@plblum/jivs-engine/build/Services/DataTypeParserService';
import { ValueHostConfigMergeService, ValidatorConfigMergeService } from '@plblum/jivs-engine/build/Services/ConfigMergeService';
import { AutoGenerateDataTypeCheckService } from '@plblum/jivs-engine/build/Services/AutoGenerateDataTypeCheckService';
import { ConditionFactory } from '@plblum/jivs-engine/build/Conditions/ConditionFactory';
import { LoggingLevel } from '@plblum/jivs-engine/build/Interfaces/LoggerService';
import { ConsoleLoggerService } from "@plblum/jivs-engine/build/Services/ConsoleLoggerService";
import { MessageTokenResolverService } from "@plblum/jivs-engine/build/Services/MessageTokenResolverService";
import { DataTypeCheckCondition, DataTypeCheckConditionConfig } from "@plblum/jivs-engine/build/Conditions/ConcreteConditions";
import { ConditionType } from "@plblum/jivs-engine/build/Conditions/ConditionTypes";
import { IConfigAnalysisService } from '@plblum/jivs-engine/build/Interfaces/ConfigAnalysisService';
import {
    ValueHostNamePropertyAnalyzer, ValueHostTypePropertyAnalyzer,
    DataTypePropertyAnalyzer, LabelPropertiesAnalyzer, ParserLookupKeyPropertyAnalyzer,
    CalcFnPropertyAnalyzer
 } from '@plblum/jivs-engine/build/ConfigAnalysis/ValueHostConfigPropertyAnalyzerClasses';
import {
    ConditionCreatorConfigPropertyAnalyzer, AllMessagePropertiesConfigPropertyAnalyzer
    
} from '@plblum/jivs-engine/build/ConfigAnalysis/ValidatorConfigPropertyAnalyzerClasses';
import {
    ConditionCategoryPropertyAnalyzer, ConditionTypeConfigPropertyAnalyzer, ConditionWithChildrenPropertyAnalyzer,
    ConditionWithConversionLookupKeyPropertyAnalyzer, ConditionWithOneChildPropertyAnalyzer,
    ConditionWithSecondValueHostNamePropertyAnalyzer, ConditionWithSecondValuePropertyAnalyzer,
    ConditionWithValueHostNamePropertyAnalyzer
} from '@plblum/jivs-engine/build/ConfigAnalysis/ConditionConfigPropertyAnalyzerClasses';

export function createMinimalValidationServices(activeCultureId: string): ValidationServices {
    let vs = new ValidationServices();

    // --- CultureServices ----------------------------
    vs.cultureService.activeCultureId = activeCultureId; // set this to your default culture

    vs.conditionFactory = new ConditionFactory();
    // no Conditions pre-installed except DataTypecheck because
    // we are leaving on autogenerate (autoGenerateDataTypeCheckService.enabled = true)
    (vs.conditionFactory as ConditionFactory).register<DataTypeCheckConditionConfig>(
        ConditionType.DataTypeCheck, (config) => new DataTypeCheckCondition(config));

    let dtis = new DataTypeIdentifierService();
    vs.dataTypeIdentifierService = dtis; 
    // Number, String, Boolean and Date are preinstalled

    let dtfs = new DataTypeFormatterService();
    vs.dataTypeFormatterService = dtfs;
    // no Formatters pre-installed

    let dtcs = new DataTypeConverterService();
    vs.dataTypeConverterService = dtcs;
    // no Converters pre-installed
    
    let dtcmps = new DataTypeComparerService();
    vs.dataTypeComparerService = dtcmps;  
    // no Comparers pre-installed

    let dtps = new DataTypeParserService();
    vs.dataTypeParserService = dtps;  
    // no Parsers pre-installed    

    let ag = new AutoGenerateDataTypeCheckService();
    vs.autoGenerateDataTypeCheckService = ag; 
    // no DataTypeCheckGenerators pre-installed

    vs.textLocalizerService = new TextLocalizerService();

    vs.loggerService = new ConsoleLoggerService(LoggingLevel.Error);

    vs.messageTokenResolverService = new MessageTokenResolverService();

    vs.valueHostConfigMergeService = new ValueHostConfigMergeService();
    vs.validatorConfigMergeService = new ValidatorConfigMergeService();

    return vs;
}

/**
 * Provides the built-in analyzers for the ConfigAnalysisService.
 * @param cas 
 */
export function registerConfigAnalyzers(cas: IConfigAnalysisService): void 
{
    cas.registerValueHostConfigPropertyAnalyzers(() => [
        new ValueHostTypePropertyAnalyzer(),
        new ValueHostNamePropertyAnalyzer(),
        new DataTypePropertyAnalyzer(),
        new LabelPropertiesAnalyzer(),
        new ParserLookupKeyPropertyAnalyzer(),
        new CalcFnPropertyAnalyzer()
    ]);
    cas.registerValidatorConfigPropertyAnalyzers(() => [
        new AllMessagePropertiesConfigPropertyAnalyzer(),
        new ConditionCreatorConfigPropertyAnalyzer()
    ]);
    cas.registerConditionConfigPropertyAnalyzers(() => [
        new ConditionTypeConfigPropertyAnalyzer(),
        new ConditionWithConversionLookupKeyPropertyAnalyzer(),
        new ConditionCategoryPropertyAnalyzer(),
        new ConditionWithChildrenPropertyAnalyzer(),
        new ConditionWithOneChildPropertyAnalyzer(),
        new ConditionWithValueHostNamePropertyAnalyzer(),
        new ConditionWithSecondValueHostNamePropertyAnalyzer(),
        new ConditionWithSecondValuePropertyAnalyzer()
    ]);
}