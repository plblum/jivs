# ARIA Attribute Support for Validation Directives

**Goal**: Automatically apply ARIA attributes (`aria-invalid`, `aria-required`, `aria-errormessage`, `aria-roledescription`, `aria-hidden`, `aria-live`) to form inputs, error messages, and other validation elements to improve accessibility and ensure compatibility with screen readers.

> A number of aria attributes may make sense based on the UI implementation, like `aria-haspopup` and `aria-pressed`. Those attributes are for the developer of the UI to implement.

## Attribute Behavior

### aria-invalid
- **Values**: `"true"`, `"false"`.
- **Purpose**: Identifies whether the input is valid.
  - `"true"`: Input is invalid.
  - `"false"`: Input is valid or no validation has occurred.
- **Rules**:
  - Added to inputs that have failed validation (`valueHost.currentValidationState.isValid === false`).
  - Removed or set to `"false"` when the input is valid.
- **Configuration**:
  - **Automatic**: Applied by the directive based on the input's validation state.

### aria-required
- **Values**: `"true"`.
- **Purpose**: Identifies that the input is required.
- **Rules**:
  - Added to inputs where `valueHost.requiresInput` is `true`.
  - Removed when the input is not required.
- **Configuration**:
  - **Automatic**: Applied by the directive based on the `requiresInput` property.

### aria-errormessage
- **Values**: The ID of the associated error message element.
- **Purpose**: Links the input to the element containing the validation error message.
- **Pattern**: The input element’s `ID` + `"_errorMessages"`.
  - Example: If the input has `id="username"`, the value of `aria-errormessage` will be `"username_errorMessages"`.
- **Rules**:
  - Added only if the input element has an `ID`. If no `ID` is set, `aria-errormessage` is **omitted**.
  - The referenced error message element must have an `ID` that matches this pattern.
- **Configuration**:
  - **Automatic**: Applied by the directive if the input has an `ID`.

### aria-roledescription
- **Values**: A localized string describing the element’s role (e.g., `"Error message"`).
- **Purpose**: Provides a human-readable description of the element’s role for screen readers.
- **Rules**:
  - Localized using `TextLocalizerService`, with the default text and `l10nKey` configured globally for each directive.
  - The role description should align with the element’s specific function (e.g., "Error message" for error containers).
  - If no localization is available, it will fall back to a globally configured default value.
- **Configuration**:
  - **User-configurable**: 
    - Two global properties are needed: default text and `l10nKey`.
    - These can be omitted from the global configuration, allowing users to remove the attribute.
    - **Default Values**:
      - `ValidationErrorDirective`: Defaults to `"Error message"`.
      - **l10nKey**: `"errormessageroledescription"`.

### aria-hidden
- **Values**: `"true"`, `"false"`.
- **Purpose**: Indicates whether an element is hidden from screen readers.
- **Rules**:
  - Added to hide elements from screen readers when they are not relevant (e.g., when no errors are present).
  - Set to `"false"` when the element should be read by the screen reader (e.g., when errors are present).
- **Configuration**:
  - **Automatic**: Managed by the directive based on visibility.

### aria-live
- **Values**: `"assertive"`, `"polite"`.
- **Purpose**: Controls how urgently screen readers announce updates to an element.
  - `"assertive"`: Announces immediately.
  - `"polite"`: Announces updates when the user finishes their current interaction.
- **Rules**:
  - Used on elements containing dynamic error messages to ensure that errors are announced as they appear.
  - The severity of the error may determine whether to use `"assertive"` or `"polite"`. This can be configured globally.
  - Applied to the error message container, not the input itself.
- **Configuration**:
  - **User-configurable**:
    - A global setting determines which value to use (`"assertive"`, `"polite"`, or `"assertive_when_severe"`).
    - The `"assertive_when_severe"` setting will switch based on whether the error list contains severe issues.
    - This attribute can be omitted in global configuration, and users can remove it.

## Directive-Specific ARIA Attribute Support

### ValidationInputDirective
- **ARIA Attributes**: `aria-invalid`, `aria-required`, `aria-errormessage`.
- **Specifics**:
  - `aria-errormessage` will use the pattern `inputID_errorMessages`.

### ValidationErrorDirective
- **ARIA Attributes**: `aria-roledescription`, `aria-live`, `aria-hidden`.
- **Specifics**:
  - `aria-roledescription` will be a localized string (e.g., `"Error message"`) resolved through `TextLocalizerService`.
  - Default values:
    - **Default Text**: `"Error message"`.
    - **l10nKey**: `"errormessageroledescription"`.
  - `aria-live` is used to control the urgency of announcing error messages.
  - `aria-hidden` is used to hide or show the error message container to screen readers.

### ShowWhenRequiredDirective
- **ARIA Attributes**: None. `aria-roledescription` makes some sense. We'll let the user establish it explicitly in global setup if they want it.


### ShowWhenCorrectedDirective
- **ARIA Attributes**: None. `aria-roledescription` makes some sense. We'll let the user establish it explicitly in global setup if they want it.

### ShowWhenIssuesFoundDirective
- **ARIA Attributes**: None. `aria-roledescription` makes some sense. We'll let the user establish it explicitly in global setup if they want it.

### ContainsInvalidChildrenDirective
- **ARIA Attributes**: None.

### ValueHostNameDirective
- **ARIA Attributes**: None.

---

## Global Configuration for Localization

- **Purpose**: Localize ARIA attributes, such as `aria-roledescription`, using globally configured default text and `l10nKey` values for each directive.

- **Configuration Location**: 
  - Each directive that uses localized ARIA attributes (e.g., `ValidationErrorDirective`) will have a corresponding global configuration object where the default text and `l10nKey` are defined.
  
- **TextLocalizerService**: 
  - **Role**: This service resolves the appropriate localized string based on the current culture. It fetches the correct localized text from the global configuration.
  - **Example**:
    ```typescript
    const roleDescription = this.services.textLocalizerService.localize(cultureId, 'errorRoleDescription', 'Error message');
    ```


---

# Predictable ID Pattern for ARIA Descriptions

## Overview:
- **Goal**: Ensure that input elements have a predictable, unique ID pattern to support `aria-errormessage` for linking inputs to error messages.

## Requirements for IDs:
- **Input Elements**:
  - Every input element must have a unique `ID` to allow `aria-errormessage` to be applied.
  - The ID must be predictable so that the associated error message element can follow the pattern `inputID_errorMessages`.

- **Error Message Elements**:
  - Error message elements must have an `ID` that follows the pattern of the input’s `ID` + `"_errorMessages"`.
  - If the input’s ID is `"username"`, the error message ID must be `"username_errorMessages"`.

## Considerations:
- **No ID on Input**: If no `ID` is set on the input, `aria-errormessage` will not be added.
- **Dynamic Forms**: Developers must ensure that each instance of an input has a unique `ID` in dynamic or repeated forms to prevent conflicts between inputs and their associated error messages.

---

# Support for Dynamic Error Message Display (Popup/Notification)

## Overview
- **Premise**: This section applies only when error messages are not visible inline on the screen (e.g., displayed directly below or next to the input field). Instead, it addresses situations where error messages need to be shown in some other way, such as via a popup, status message, or notification view. If your error messages are always visible on-screen, this section is not relevant.
- **Goal**: Ensure that error messages are visible to screen readers when `aria-errormessage` is used. Screen readers will not announce error messages in containers that are fully hidden (e.g., `display: none`). As a result, the user must decide whether to show the error message container in a way that can be accessed by the screen reader or continue using a UI where their own popup mechanism displays the errors, and forego using `aria-errormessage`.

## How Users Experience This Feature
- **Error Message Visibility**: When an input field is focused (i.e., when a user clicks or taps into it), any associated error messages should automatically become visible to the user and to screen readers. Once the user moves away from the input (loses focus), the error message can be hidden again.
  - **For screen readers**: Error messages will be announced as soon as they are made visible, but only if they are not fully hidden via `display: none`. If the error message remains hidden, screen readers will not announce it.
  - **User Interaction**: This dynamic behavior ensures that users get immediate feedback when they interact with form inputs, making the experience more responsive and accessible.

## Implementation
- This feature uses existing features with these types: IPopupAction, IFocusListenerAction, PopupDirective.

- **ValidationInputDirective**: 
This directive will set up event handlers (e.g., `focus` and `blur` events) to trigger focus-related commands using IFocusListenerAction. These commands notify other directives about input focus changes.
- **Handling Commands**: The PopupDirective will subscribe to those focus-related commands.

Here is a classic scenario. While there are validation errors, the user only sees an icon. When the mouse is over the icon, the error messages appear.

 ```html
<div [showWhenInvalid]="valueHostName">
   <div>
     <img src="info-icon.png" />
   </div>
   <div [popup] [validationErrors]></div>
</div>
```

# Screen Reader Compatibility with Hidden Error Messages

**Goal**: Ensure that error messages that are visually hidden (e.g., via display: none) can still be announced by screen readers when an input with errors is focused.

## Solution:
Use `aria-hidden` and `aria-live` to make error messages available to screen readers.
## Snippet:
Updating Error Message ARIA on Focus:
```ts
this.el.nativeElement.addEventListener('focus', () => {
  this.errorElement.setAttribute('aria-hidden', 'false');
  this.errorElement.setAttribute('aria-live', 'assertive');
});
```

## Considerations:
`aria-live="assertive"`: The error message will be announced immediately when it becomes available.
`aria-hidden="true"`: Keeps the error message hidden from screen readers when the input is valid or not focused.

# User-Configurable aria-live Severity Levels

**Goal**: Provide users with the ability to dynamically adjust the severity of how quickly screen readers announce error messages using `aria-live`. This could depend on whether the issue is critical (severe), just an error, or a warning.

## Snippet:
Example Usage:
```html
<div id="username_validationerrors" aria-live="assertive">
  Username is required.
</div>
```
JavaScript Handling:

```ts
if (validationState.severity === 'severe') {
  this.renderer.setAttribute(this.errorElement, 'aria-live', 'assertive');
} else if (validationState.severity === 'warning') {
  this.renderer.setAttribute(this.errorElement, 'aria-live', 'polite');
}
```
## Considerations:
Allow user customization via global settings.

# Flexible Error Message Handling in UI Designs

**Goal**: Support different UI designs for error messages:
- Some UIs may completely hide error messages visually.
- Others may always keep error messages visible for screen reader compatibility.
- Detect screen reader usage (if feasible) and adapt error display accordingly.
## Snippet:
Example for Always Visible Error Messages:
```html
<div id="username_validationerrors">Username is required.</div>
```
## Considerations:
Screen Reader Detection: Native detection isn’t feasible, but you can provide conditional logic for accessibility settings based on UI needs.

# aria-roledescription for Better Role Descriptions (with Localization)

**Goal**: Localize and customize the descriptions for various elements (e.g., error messages) using `aria-roledescription`. Leverage TextLocalizerService for providing localized strings.
## Snippet:
Example:
```ts
<div id="username_validationerrors" aria-roledescription="Error message">Username is required.</div>
```
```ts
const roleDescription = this.services.textLocalizerService.localize(cultureId, 'errorRoleDescription', 'Error message');
this.renderer.setAttribute(this.el.nativeElement, 'aria-roledescription', roleDescription);
```
## Considerations:
Global configuration should allow users to customize both the default text and the localization keys.

# Flexible ARIA Attribute Configuration

**Goal**: Provide users with the flexibility to configure and extend ARIA attributes for validation-related directives, such as adding custom ARIA roles or attributes (like aria-completed).

## Snippet:
Example Usage:
```html
<input aria-completed="true">
```
## Considerations:
Users should be able to define any ARIA attribute they need, and configure values for their specific validation scenarios.

# Global Configuration in FivaseServices

**Goal**: Add a global configuration object in `FivaseServices` that manages ARIA attribute settings, localization keys, default messages, etc., making it easier for users to customize behavior across all directives.
## Snippet:
Global Config Example:
```ts
const config = {
  ariaSettings: {
    liveSeverity: 'assertive',
    defaultRoleDescription: 'Error message',
    localizedTexts: {
      required: 'This field is required',
      invalid: 'Invalid value'
    }
  }
};
```
## Considerations:
This configuration should be passed to the directives through FivaseServices for centralized control over behavior and accessibility settings.

# Directive-Specific Attribute Handling with Base Class

**Goal**: Create a base class for handling common ARIA logic across all validation-related directives. Subclasses can override or extend behavior for their specific needs.
## Snippet:
Base Class Example:
```ts
class BaseValidationDirective {
  protected addAriaAttributes(element: HTMLElement, validationState: ValidationState): void {
    // Set up ARIA attributes
  }
}
```
Subclass Example:
```ts
class ValidationInputDirective extends BaseValidationDirective {
  // Customize ARIA behavior specific to this directive
}
```
## Considerations:
Singleton instances of these directives will be available via FivaseServices to avoid multiple instances.

# User-Provided Localizable Text and Keys in TextLocalizerService

**Goal**: Allow users to provide custom localized text or l10nKey values through TextLocalizerService. These values should be configurable for all localizable text elements in the validation system.

## Snippet:
Example:
```ts
const customTexts = {
  required: 'This field is mandatory',
  invalid: 'Please provide a valid value'
};

this.services.textLocalizerService.register('required', customTexts);
```
## Considerations:
TextLocalizerService should allow registration of custom localization keys and default text, with global configuration access via FivaseServices.


# ARIA Support in PopupDirective (Aligned with "Design for ARIAs")

## Focus and Blur Events for Error Message Visibility:

- The PopupDirective listens for focus and blur events on associated input elements.
- When the input gains focus, the directive makes associated error messages visible, ensuring the user is alerted to issues.
- When the input loses focus, the popup can be hidden, maintaining a clean UI.

## `aria-hidden` Attribute:

- The PopupDirective manages the aria-hidden attribute to control whether the popup content (like error messages) is accessible to screen readers.
- When Hidden: aria-hidden="true" ensures screen readers ignore the hidden content.
- When Visible: aria-hidden="false" allows screen readers to detect and announce error messages when they are relevant.

## aria-errormessage Support:

The directive continues using the existing aria-errormessage logic, linking input fields to the appropriate error message elements by their IDs. This linkage remains consistent, and no changes are needed in how IDs are handled.

## Alignment with ValidationErrorDirective:

The PopupDirective ensures synchronization with the ValidationErrorDirective by controlling error message visibility in response to focus/blur events, but it doesn't alter the overall ID structure for ARIA attributes.

## Dynamic Error Feedback:

By making error messages visible on focus and hiding them on blur, the PopupDirective ensures a seamless dynamic experience for users, particularly those relying on screen readers. This also aligns with the goal of immediate, accessible feedback outlined in the design document.

In conclusion, the PopupDirective aligns with the broader "Design for ARIAs" goals by handling visibility, focus events, and ensuring that ARIA attributes like aria-hidden and aria-errormessage are properly maintained. This integration ensures both accessibility and responsiveness in forms with validation.