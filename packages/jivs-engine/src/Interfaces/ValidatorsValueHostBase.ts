/**
 * @module ValueHosts/Types/ValidatorsValueHostBase
 */
import { IValidator, ValidatorConfig } from "./Validator";
import { IValidatableValueHostBase, IValidatableValueHostBaseCallbacks, ValidatableValueHostBaseConfig, ValidatableValueHostBaseInstanceState } from "./ValidatableValueHostBase";
import { FluentValidatorCollector } from "../ValueHosts/Fluent";

/**
* Extends ValidatableValueHost to use the Validators class in support of validation.
*/
export interface IValidatorsValueHostBase extends IValidatableValueHostBase {

    /**
     * Gets an Validator already assigned to this ValidatorsValueHostBase.
     * @param errorCode - The errorCode value assigned to the Validator
     * that you want. Same as ConditionType unless you set the ValidatorConfig.errorCode property
     * @returns The Validator or null if the condition type does not match.
     */
    getValidator(errorCode: string): IValidator | null;

    /**
     * Intended for the UI developer to add their own UI specific validators
     * to those already configured within ValidationManager.
     * It adds or replaces when the ConditionType matches an existing 
     * ValidatorConfig.
     * 
     * Try to avoid using it for validators coming from business logic.
     * 
     * This fits well with Data Type Check cases that were
     * not setup by Auto Generate Data Type Checks (see AutoGenerateDataTypeCheckService).
     * 
     * The RequireTextCondition and StringLengthCondition are good too,
     * but their rules typically are known by business logic and its just
     * a matter of converting "required" and "string length" business rules
     * to these conditions during setup in ValidationManager.
     * @param config 
     */
    addValidator(config: ValidatorConfig): void;

    /**
     * Alternative way to add validators (see @link addValidator)
     * where you chain validation rules to this function like this:
     * `vh.configValidators().required().regExp(/\d/)`
     */
    configValidators(): FluentValidatorCollector;  

    /**
     * While you normally set the validation group name with ValidatorsValueHostBaseConfig.group,
     * ValidatorsValueHostBaseConfig is often setup from the perspective of the business logic,
     * which does not make the ultimate decision on field grouping.
     * Call this from the UI layer when establishing the input to replace the supplied
     * group name.
     * @param group 
     */
    setGroup(group: string): void;

}
/**
 * Just the data that is used to describe this input value.
 * It should not contain any supporting functions or services.
 * It should be generatable from JSON, and simply gets typed to ValidatorsValueHostBaseConfig.
 * This provides the backing data for each ValidatorsValueHostBase.
 * The server side could in fact supply this object via JSON,
 * allowing the server's Model to dictate this, except values are converted to their native forms
 * like a JSON date is a Date object.
 * However, there are sometimes
 * cases a business rule is client side only (parser error converting "abc" to number)
 * and times when a business rule is server side only (looking for injection attacks
 * for the purpose of logging and blocking.)
 */
export interface ValidatorsValueHostBaseConfig extends ValidatableValueHostBaseConfig {

    /**
     * How to validate based on the business rules.
     * These are used to create actual validator objects.
     * This array may need to host validators that are client-side only,
     * such as parser error converting "abc" to number.
     */
    validatorConfigs: Array<ValidatorConfig> | null;
}

/**
 * Elements of ValidatorsValueHostBase that are stateful based on user interaction
 */
export interface ValidatorsValueHostBaseInstanceState extends ValidatableValueHostBaseInstanceState {


}


/**
 * Provides callback hooks for the consuming system to supply to IValidatorsValueHostBases.
 */
export interface IValidatorsValueHostBaseCallbacks extends IValidatableValueHostBaseCallbacks {

}

/**
 * Determines if the object implements IValidatorsValueHostBase.
 * @param source 
 * @returns source typecasted to IValidatorsValueHostBase if appropriate or null if not.
 */
export function toIValidatorsValueHostBase(source: any): IValidatorsValueHostBase | null
{
    if (source && typeof source === 'object')
    {
        let test = source as IValidatorsValueHostBase;    
        // some select members of IValidatorsValueHostBase
        if (test.addValidator !== undefined &&
            test.validate !== undefined &&
            test.getIssuesFound !== undefined)
            return test;
    }
    return null;
}
