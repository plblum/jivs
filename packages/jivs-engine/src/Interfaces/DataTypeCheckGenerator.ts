/**
 * {@inheritDoc DataTypes/Types/IDataTypeCheckGenerator!IDataTypeCheckGenerator:interface }
 * @module DataTypes/Types/IDataTypeCheckGenerator
 */

import { IConditionFactory, ICondition } from "./Conditions";
import { IInputValueHost } from "./InputValueHost";

/**
 * Used to automatically generate a Condition used for Data Type Check
 * based on the DataTypeLookupKey. Only supports IInputValueHost.
 * 
 * By default, automatic generation uses the DataTypeCheckCondition.
 * 
 * That condition determines an error when ValueHost.NativeValue is undefined,
 * which is a result of a conversion of InputValue fails.
 * 
 * There are other ways to check a data type. Strings with a well 
 * defined pattern will often be the same as they were between
 * InputValue and NativeValue, aside from trimming spaces.
 * So the NativeValue is a string that will need to be checked against
 * a regular expression or some other rule that confirms the string matches requirements.
 * 
 * Thats when you create one of these and register it with
 * autoGenerateDataTypeCheckService.
 * 
 * You can also prevent autogeneration for a given dataTypeLookupKey by
 * returning null instead of a condition in createCondition().
 * Register your implementation with ValidationServices.autoGenerateDataTypeCheckService.
 */
export interface IDataTypeCheckGenerator
{

/**
 * Determines if the dataTypeLookupKey is supported.
 * Only call CreateCondition when this returns true.
 * @param dataTypeLookupKey
 * @returns when true, datatypeLookupKey is supported and createCondition can be used.
 */
    supportsValue(dataTypeLookupKey: string): boolean;
/**
 * Creates condition based on the DataTypeLookupKey that will handle the Data Type Check feature.
 * Most of the time, ICondition.ConditionCategory should be DataTypeCheck.
 * Often you supply several conditions to cover different aspects of the data that may 
 * need correcting, so each can have its own error message.
 * If your data type check needs the DataTypeCheckCondition in addition to others,
 * return the DataTypeCheckCondition instance too.
 * @param valueHost 
 * @param dataTypeLookupKey 
 * @param conditionFactory
 * @returns An array of Condition instances to use or empty array auto-generation.
 */
    createConditions(valueHost: IInputValueHost, dataTypeLookupKey: string,
        conditionFactory: IConditionFactory): Array<ICondition>;
}