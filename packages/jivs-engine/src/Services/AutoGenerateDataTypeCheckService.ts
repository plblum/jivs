/**
 * @module Services/ConcreteClasses/AutoGenerateDataTypeCheckService
 */

import { DataTypeCheckConditionConfig } from "../Conditions/ConcreteConditions";
import { ConditionType } from "../Conditions/ConditionTypes";
import { ConditionConfig, ICondition } from "../Interfaces/Conditions";
import { IDataTypeCheckGenerator } from "../Interfaces/DataTypeCheckGenerator";
import { IAutoGenerateDataTypeCheckService } from "../Interfaces/AutoGenerateDataTypeCheckService";
import { assertNotNull } from "../Utilities/ErrorHandling";
import { DataTypeServiceBaseWithServices } from "./DataTypeServiceBase";
import { IInputValueHost } from "../Interfaces/InputValueHost";

/**
 * A service that supports automatic generation of 
 * Conditions for the Data Type Check
 * using {@link DataTypes/Types/IDataTypeCheckGenerator!IDataTypeCheckGenerator | IDataTypeCheckGenerator} instances.
 * 
 * This class is available on {@link Services/ConcreteClasses/ValidationServices!ValidationServices#autoGenerateDataTypeCheckService | ValidationServices.autoGenerateDataTypeCheckService}.
 */
export class AutoGenerateDataTypeCheckService extends DataTypeServiceBaseWithServices<IDataTypeCheckGenerator>
    implements IAutoGenerateDataTypeCheckService
{
    protected indexOfExisting(item: IDataTypeCheckGenerator): number {
        return -1; // does not support replacing registered items
    }
    /**
     * When true, data type check conditions are auto generated if not 
     * supplied in the ValueHost's list of validators.
     * Defaults to true.
     */
    public get enabled(): boolean
    {
        return this._autoGenerateDataTypeConditionEnabled;
    }
    public set enabled(value: boolean)
    {
        this._autoGenerateDataTypeConditionEnabled = value;
    }
    private _autoGenerateDataTypeConditionEnabled: boolean = true;
    
    /**
     * {@inheritDoc Services/Types/IAutoGenerateDataTypeCheckService!IAutoGenerateDataTypeCheckService#autoGenerateDataTypeCondition }
     */    
    public autoGenerateDataTypeCondition(valueHost: IInputValueHost, dataTypeLookupKey: string): ICondition | null
    {
        assertNotNull(valueHost, 'valueHost');
        assertNotNull(dataTypeLookupKey, 'dataTypeLookupKey');
        let generator = this.find(dataTypeLookupKey);
        if (generator !== null)
            return generator.createCondition(valueHost, dataTypeLookupKey, this.services.conditionFactory); // may return null
        let config = this.createDefaultConditionConfig(valueHost);
        return this.services.conditionFactory.create(config);
    }
    protected createDefaultConditionConfig(valueHost: IInputValueHost): ConditionConfig
    {
        return <DataTypeCheckConditionConfig> {
            type: ConditionType.DataTypeCheck,
            valueHostName: valueHost.getName()
        };
    }

    /**
     * Finds the first {@link DataTypes/Types/IDataTypeCheckGenerator!IDataTypeCheckGenerator | IDataTypeCheckGenerator}
     * that supports the value, or null if none are found.
     * @param dataTypeLookupKey 
     * @returns 
     */
    public find(dataTypeLookupKey: string): IDataTypeCheckGenerator | null {
        return this.getAll().find((dtg) => dtg.supportsValue(dataTypeLookupKey)) ?? null;
    }
}