/**
 * Supplies services and tools to be used as dependency injection
 * into the classes of this system.
 * There are many configuration choices involved. Its best to have
 * a function that creates a ValidationService with its configuration together.
 * Copy the /starter_code/create_services.ts file into your app.
 * It contains such a function, CreateValidationServices().
 * Edit that file to adjust your configuration.
 * @module Services/ConcreteClasses/ValidationServices
 */

import { assertNotNull, CodingError } from '../Utilities/ErrorHandling';
import type { ILoggerService } from '../Interfaces/LoggerService';
import type { IInputValidatorFactory } from '../Interfaces/InputValidator';
import type { IValidationServices } from '../Interfaces/ValidationServices';
import type { IConditionFactory } from '../Interfaces/Conditions';
import { IValueHostFactory } from '../Interfaces/ValueHost';
import { InputValidatorFactory } from '../ValueHosts/InputValidator';
import { ValueHostFactory, registerStandardValueHostGenerators } from '../ValueHosts/ValueHostFactory';
import { ConsoleLoggerService } from './ConsoleLoggerService';
import { ITextLocalizerService } from '../Interfaces/TextLocalizerService';
import { TextLocalizerService } from './TextLocalizerService';
import { IAutoGenerateDataTypeCheckService } from '../Interfaces/AutoGenerateDataTypeCheckService';
import { IDataTypeComparerService } from '../Interfaces/DataTypeComparerService';
import { IDataTypeConverterService } from '../Interfaces/DataTypeConverterService';
import { IDataTypeFormatterService } from '../Interfaces/DataTypeFormatterService';
import { IDataTypeIdentifierService } from '../Interfaces/DataTypeIdentifierService';
import { IMessageTokenResolverService } from '../Interfaces/MessageTokenResolverService';

/**
 * Supplies services and tools to be used as dependency injection
 * into the classes of this system. It also supplies factories.
 * There are many configuration choices involved. Its best to have
 * a function that creates a ValidationService with its configuration together.
 * Copy the /starter_code/create_services.ts file into your app.
 * It contains such a function, CreateValidationServices().
 * Edit that file to adjust your configuration.
 */
export class ValidationServices implements IValidationServices {
    constructor() {

    }
    /**
     * The culture shown to the user in the app. Its the ISO language-region format.
       This value is the starting point to search through localizations.
       If not supplied, it defaults to 'en'.
     */
    public get activeCultureId(): string {
        return this._activeCultureID ?? 'en';
    }
    public set activeCultureId(cultureID: string) {
        this._activeCultureID = cultureID;
    }
    private _activeCultureID: string | null = null;

    /**
     * Factory to create Condition objects.
     */
    public get conditionFactory(): IConditionFactory {
        if (!this._conditionFactory)
            throw new CodingError('Must assign ValidationServices.ConditionFactory.');
        return this._conditionFactory;
    }
    public set conditionFactory(factory: IConditionFactory) {
        assertNotNull(factory, 'factory');
        this._conditionFactory = factory;
    }
    private _conditionFactory: IConditionFactory | null = null;

    /**
     * Service for formatting data types used within tokens of error messages
    *  using {@link DataTypes/Types/IDataTypeFormatter!IDataTypeFormatter | IDataTypeFormatter} instances.
     */
    public get dataTypeFormatterService(): IDataTypeFormatterService {
        if (!this._dataTypeFormatterService)
            throw new CodingError('Must assign ValidationServices.dataTypeFormatterService.');

        return this._dataTypeFormatterService;
    }
    public set dataTypeFormatterService(service: IDataTypeFormatterService) {
        assertNotNull(service, 'service');
        this._dataTypeFormatterService = service;
        service.services = this;
    }
    private _dataTypeFormatterService: IDataTypeFormatterService | null = null;    
    
    /**
     * Service for identifing the Data Type Lookup Key associated with a data type
     * using {@link DataTypes/Types/IDataTypeIdentifier!IDataTypeIdentifier | IDataTypeIdentifier} instances.
     */

    public get dataTypeIdentifierService(): IDataTypeIdentifierService {
        if (!this._dataTypeIdentifierService)
            throw new CodingError('Must assign ValidationServices.dataTypeIdentifierService.');

        return this._dataTypeIdentifierService;
    }
    public set dataTypeIdentifierService(service: IDataTypeIdentifierService) {
        assertNotNull(service, 'service');
        this._dataTypeIdentifierService = service;
    }
    private _dataTypeIdentifierService: IDataTypeIdentifierService | null = null;    
    
    /**
     * Service for changing the original value into 
     * something that you want a condition to evaluate
     * using {@link DataTypes/Types/IDataTypeConverter!IDataTypeConverter | IDataTypeConverter} instances.
     */
    public get dataTypeConverterService(): IDataTypeConverterService {
        if (!this._dataTypeConverterService)
            throw new CodingError('Must assign ValidationServices.dataTypeConverterService.');

        return this._dataTypeConverterService;
    }
    public set dataTypeConverterService(service: IDataTypeConverterService) {
        assertNotNull(service, 'service');
        this._dataTypeConverterService = service;
        service.services = this;
    }
    private _dataTypeConverterService: IDataTypeConverterService | null = null;
    /**
     * Service for changing the comparing two values
     * using {@link DataTypes/Types/IDataTypeComparer!IDataTypeComparer | IDataTypeComparer} instances.
     */
    public get dataTypeComparerService(): IDataTypeComparerService {
        if (!this._dataTypeComparerService)
            throw new CodingError('Must assign ValidationServices.dataTypeComparerService.');

        return this._dataTypeComparerService;
    }
    public set dataTypeComparerService(service: IDataTypeComparerService) {
        assertNotNull(service, 'service');
        this._dataTypeComparerService = service;
        service.services = this;
    }
    private _dataTypeComparerService: IDataTypeComparerService | null = null;
    /**
     * Service that supports automatic generation of Conditions for the Data Type Check
     * using {@link DataTypes/Types/IDataTypeCheckGenerator!IDataTypeCheckGenerator | IDataTypeCheckGenerator} instances.
     */
    public get autoGenerateDataTypeCheckService(): IAutoGenerateDataTypeCheckService {
        if (!this._autoGenerateDataTypeCheckService)
            throw new CodingError('Must assign ValidationServices.autoGenerateDataTypeCheckService.');

        return this._autoGenerateDataTypeCheckService;
    }
    public set autoGenerateDataTypeCheckService(service: IAutoGenerateDataTypeCheckService) {
        assertNotNull(service, 'service');
        this._autoGenerateDataTypeCheckService = service;
        service.services = this;
    }
    private _autoGenerateDataTypeCheckService: IAutoGenerateDataTypeCheckService | null = null;

    /**
     * Service to text localization specific, effectively mapping
     * a text key to a language specific version of that text.
     * Error messages and IDataTypeFormatters use this.
     * Defaults to using TextLocalizerServices class.
     * If you use a third party localization system, you may prefer
     * to use that here. Implement ITextLocalizerService around
     * that third party library.
     */
    public get textLocalizerService(): ITextLocalizerService
    {
        if (!this._textLocalizerService)
            this._textLocalizerService = new TextLocalizerService();
        return this._textLocalizerService;
    }
    public set textLocalizerService(service: ITextLocalizerService)
    {
        this._textLocalizerService = service;
    }
    private _textLocalizerService: ITextLocalizerService | null = null; 

    /**
     * Service to get the IMessageTokenResolver instance that replaces
     * tokens in messages.
     */
    public get messageTokenResolverService(): IMessageTokenResolverService {
        if (!this._messageTokenResolverService)
            throw new CodingError('Must assign ValidationServices.MessageTokenResolverService.');

        return this._messageTokenResolverService;
    }
    public set messageTokenResolverService(service: IMessageTokenResolverService) {
        assertNotNull(service, 'service');
        this._messageTokenResolverService = service;
    }
    private _messageTokenResolverService: IMessageTokenResolverService | null = null;

    /**
     * Service to get the ILogger instance that replaces
     * tokens in messages.
     * Defaults to using ConsoleLoggerService.
     */
    public get loggerService(): ILoggerService {
        if (!this._loggerService)
            this._loggerService = new ConsoleLoggerService();
        return this._loggerService;
    }
    public set loggerService(service: ILoggerService) {
        assertNotNull(service, 'service');
        this._loggerService = service;
    }
    private _loggerService: ILoggerService | null = null;

    //#region ValueHostFactory
    /**
     * The ValueHostFactory to use.
     * It supplies a default if not setup by the user.
     */
    public get valueHostFactory(): IValueHostFactory {
        if (!this._valueHostFactory) {
            let factory = new ValueHostFactory();
            registerStandardValueHostGenerators(factory);
            this._valueHostFactory = factory;
        }
        return this._valueHostFactory;
    }
    public set valueHostFactory(factory: IValueHostFactory) {
        assertNotNull(factory, 'factory');
        this._valueHostFactory = factory;
    }
    private _valueHostFactory: IValueHostFactory | null = null;

    //#endregion ValueHostFactory

    //#region InputValidatorFactory    
    /**
     * The InputValidatorFactory to use.
     * It supplies a default if not setup by the user.
     */
    public get inputValidatorFactory(): IInputValidatorFactory {
        if (!this._inputValidatorFactory)
            this._inputValidatorFactory = new InputValidatorFactory();
        return this._inputValidatorFactory;
    }
    public set inputValidatorFactory(factory: InputValidatorFactory) {
        assertNotNull(factory, 'factory');
        this._inputValidatorFactory = factory;
    }
    private _inputValidatorFactory: IInputValidatorFactory | null = null;

    //#endregion InputValidatorFactory        
}
