import { DataTypeCheckCondition, IntegerCondition, PositiveCondition, RegExpCondition, RegExpConditionConfig } from "../../src/Conditions/ConcreteConditions";
import { ConditionFactory } from "../../src/Conditions/ConditionFactory";
import { ConditionType } from "../../src/Conditions/ConditionTypes";
import { LookupKey } from "../../src/DataTypes/LookupKeys";
import { ICondition, IConditionFactory } from "../../src/Interfaces/Conditions";
import { IDataTypeCheckGenerator } from "../../src/Interfaces/DataTypeCheckGenerator";
import { IInputValueHost } from "../../src/Interfaces/InputValueHost";
import { LoggingLevel } from "../../src/Interfaces/LoggerService";
import { AutoGenerateDataTypeCheckService } from "../../src/Services/AutoGenerateDataTypeCheckService";
import { CapturingLogger } from "../TestSupport/CapturingLogger";
import { MockValidationServices, MockValidationManager } from "../TestSupport/mocks";

class TestCheckGenerator implements IDataTypeCheckGenerator {
    constructor(dataTypeLookupKey: string, returns: Array<ICondition>) {
        this.dataTypeLookupKey = dataTypeLookupKey;
        this.returns = returns;
    }
    dataTypeLookupKey: string;
    returns: Array<ICondition>;
    supportsValue(dataTypeLookupKey: string): boolean {
        return this.dataTypeLookupKey === dataTypeLookupKey;
    }
    createConditions(valueHost: IInputValueHost, dataTypeLookupKey: string,
        conditionfactory: IConditionFactory): Array<ICondition> {
        return this.returns;
    }
}

describe('AutoGenerateDataTypeCheckService.RegisterDataTypeCheckGenerator', () => {
    test('Invalid parameters', () => {
        let testItem = new AutoGenerateDataTypeCheckService();
        expect(() => testItem.register(null!)).toThrow(/item/);
    });
    test('Register successful', () => {
        const knownLookupKey = 'ABC';
        let testItem = new AutoGenerateDataTypeCheckService();
        expect(() => testItem.register(new TestCheckGenerator(knownLookupKey, []))).not.toThrow();
        expect(testItem.find(knownLookupKey)).not.toBeNull();
        expect(testItem.find('unknown')).toBeNull();
    });
});
describe('AutoGenerateDataTypeCheckService.AutoGenerateDataTypeCondition', ()=> {
    test('Not registered lookupKey returns DataTypeCheckCondition', () => {
        let services = new MockValidationServices(true, true);
        let logger = services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Debug;

        let vm = new MockValidationManager(services);
        let vh = vm.addMockInputValueHost('Field1', LookupKey.String, 'label');
        let testItem = services.autoGenerateDataTypeCheckService;
        let conditions: Array<ICondition> = [];

        expect(() => conditions = testItem.autoGenerateDataTypeConditions(vh, 'ANYTHING')).not.toThrow();
        expect(conditions.length).toBe(1);
        expect(conditions[0]).toBeInstanceOf(DataTypeCheckCondition);
        // really should test for the Config.valueHostName to be 'Field1'
        // and Type to be DataTypeCheck, but Config is protected.
        expect(logger.findMessage('DataTypeCheck', LoggingLevel.Info, null, null)).not.toBeNull();

    });
    test('Registered with a class that returns a condition. Returns an instance of that condition for the same ValueHostName', () => {
        let services = new MockValidationServices(true, true);
        let logger = services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Debug;
        (services.conditionFactory as ConditionFactory).register<RegExpConditionConfig>(
            ConditionType.RegExp, (config) => new RegExpCondition(config));        
        let vm = new MockValidationManager(services);
        let vh = vm.addMockInputValueHost('Field1', LookupKey.String, 'label');
        let testItem = services.autoGenerateDataTypeCheckService as AutoGenerateDataTypeCheckService;
        let condition: ICondition | null = new RegExpCondition({
            conditionType: ConditionType.RegExp,
            expressionAsString: 'test',
            valueHostName: vh.getName()
        });
        testItem.register(new TestCheckGenerator('ABC', [condition]));
        let result: Array<ICondition> = [];

        expect(() => result = testItem.autoGenerateDataTypeConditions(vh, 'ABC')).not.toThrow();
        expect(result.length).toBe(1);
        expect(result[0]).toBeInstanceOf(RegExpCondition);
        expect(logger.findMessage('Using TestCheckGenerator', LoggingLevel.Debug, null, null)).not.toBeNull();
        expect(logger.findMessage('RegExp', LoggingLevel.Info, null, null)).not.toBeNull();
    });    
    test('Registered with a class that returns []. Returns []', () => {
        let services = new MockValidationServices(true, true);
        let logger = services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Debug;
        let vm = new MockValidationManager(services);
        let vh = vm.addMockInputValueHost('Field1', LookupKey.String, 'label');
        let testItem = services.autoGenerateDataTypeCheckService as AutoGenerateDataTypeCheckService;
        testItem.register(new TestCheckGenerator('ABC', []));

        let result: Array<ICondition> = [];
        expect(() => result = testItem.autoGenerateDataTypeConditions(vh, 'ABC')).not.toThrow();
        expect(result).toEqual([]);

        expect(logger.findMessage('Using TestCheckGenerator', LoggingLevel.Debug, null, null)).not.toBeNull();
        expect(logger.findMessage('Nothing to auto generate', LoggingLevel.Info, null, null)).not.toBeNull();
    });     
    test('Registered class is configured to emulate PositiveInteger returning DataTypeCheck, Positive, and Integer conditions.', () => {
        let services = new MockValidationServices(true, true);  // already setup with DataTypeCheck, Positive and Integer
        let logger = services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Debug;
    
        let vm = new MockValidationManager(services);
        let vh = vm.addMockInputValueHost('Field1', LookupKey.String, 'label');
        let testItem = services.autoGenerateDataTypeCheckService as AutoGenerateDataTypeCheckService;
        let condition: ICondition | null = new RegExpCondition({
            conditionType: ConditionType.RegExp,
            expressionAsString: 'test',
            valueHostName: vh.getName()
        });
        testItem.register(new TestCheckGenerator('ABC', [
            new DataTypeCheckCondition({ conditionType: ConditionType.DataTypeCheck, valueHostName: vh.getName() }),
            new PositiveCondition({ conditionType: ConditionType.Positive, valueHostName: vh.getName() }),
            new IntegerCondition({ conditionType: ConditionType.Integer, valueHostName: vh.getName()}),        
        ]));
        let result: Array<ICondition> = [];
    
        expect(() => result = testItem.autoGenerateDataTypeConditions(vh, 'ABC')).not.toThrow();
        expect(result.length).toBe(3);
        expect(result[0]).toBeInstanceOf(DataTypeCheckCondition);
        expect(result[1]).toBeInstanceOf(PositiveCondition);
        expect(result[2]).toBeInstanceOf(IntegerCondition);    
        expect(logger.findMessage('Using TestCheckGenerator', LoggingLevel.Debug, null, null)).not.toBeNull();
        expect(logger.findMessage('DataTypeCheck', LoggingLevel.Info, null, null)).not.toBeNull();
        expect(logger.findMessage('Positive', LoggingLevel.Info, null, null)).not.toBeNull();
        expect(logger.findMessage('Integer', LoggingLevel.Info, null, null)).not.toBeNull();
    });        
});
