import {
    DataTypeCheckConditionConfig, RangeConditionConfig,
    RequireTextConditionConfig, RequireTextCondition, RegExpConditionConfig, RegExpCondition,
    EqualToCondition,
    AllMatchCondition,
    AllMatchConditionConfig,
    StringLengthCondition,
    StringLengthConditionConfig,
    EqualToConditionConfig,
} from "../../src/Conditions/ConcreteConditions";
import { Validator } from "../../src/Validation/Validator";
import { InputValueHost, InputValueHostGenerator, toIInputValueHost } from "../../src/ValueHosts/InputValueHost";
import { LoggingCategory, LoggingLevel } from "../../src/Interfaces/LoggerService";
import { ValidationManager } from "../../src/Validation/ValidationManager";
import { MockValidationServices, MockValidationManager } from "../TestSupport/mocks";
import { ValidationServices } from '../../src/Services/ValidationServices';
import { ValueHostName } from "../../src/DataTypes/BasicTypes";
import { InputValueHostConfig, InputValueHostInstanceState, IInputValueHost, IInputValueHostCallbacks, toIInputValueHostCallbacks } from "../../src/Interfaces/InputValueHost";
import {
    ValidationStatus, IssueFound, ValueHostValidateResult, ValidationSeverity, ValidateOptions,
    BusinessLogicError,
    ValidationState
} from "../../src/Interfaces/Validation";
import { ValidatorValidateResult, IValidator, ValidatorConfig, IValidatorFactory } from "../../src/Interfaces/Validator";
import { IValidationManager, ValidationManagerConfig } from "../../src/Interfaces/ValidationManager";
import { SetValueOptions, IValueHost, ValueHostInstanceState, ValueHostInstanceStateChangedHandler, ValidTypesForInstanceStateStorage, ValueHostConfig } from "../../src/Interfaces/ValueHost";
import { toIValidatableValueHostBase } from "../../src/ValueHosts/ValidatableValueHostBase";
import { ConditionWithPromiseTester } from "../Validation/Validator.test";
import { ConditionCategory, ConditionEvaluateResult, ICondition, ConditionConfig, IConditionFactory } from "../../src/Interfaces/Conditions";
import { IValidationServices } from "../../src/Interfaces/ValidationServices";
import { ConditionFactory } from "../../src/Conditions/ConditionFactory";
import { MessageTokenResolverService } from "../../src/Services/MessageTokenResolverService";
import { IValueHostResolver } from "../../src/Interfaces/ValueHostResolver";
import { TextLocalizerService } from "../../src/Services/TextLocalizerService";
import { ConditionType } from "../../src/Conditions/ConditionTypes";
import { LookupKey } from "../../src/DataTypes/LookupKeys";
import { ValueHostType } from "../../src/Interfaces/ValueHostFactory";
import { IDataTypeCheckGenerator } from "../../src/Interfaces/DataTypeCheckGenerator";
import { AutoGenerateDataTypeCheckService } from "../../src/Services/AutoGenerateDataTypeCheckService";
import { DataTypeComparerService } from "../../src/Services/DataTypeComparerService";
import { DataTypeConverterService } from "../../src/Services/DataTypeConverterService";
import { DataTypeIdentifierService } from "../../src/Services/DataTypeIdentifierService";
import { DataTypeFormatterService } from "../../src/Services/DataTypeFormatterService";
import { StaticValueHost } from '../../src/ValueHosts/StaticValueHost';
import { BusinessLogicErrorsValueHost } from "../../src/ValueHosts/BusinessLogicErrorsValueHost";
import { createValidationServicesForTesting } from "../TestSupport/createValidationServices";
import { ValueHostValidatedHandler, IValidatableValueHostBase, ValidatableValueHostBaseInstanceState, ValueHostValidationState } from "../../src/Interfaces/ValidatableValueHostBase";
import { AlwaysMatchesConditionType, NeverMatchesConditionType, IsUndeterminedConditionType, NeverMatchesConditionType2, registerTestingOnlyConditions, NeverMatchesCondition, UserSuppliedResultConditionType } from "../TestSupport/conditionsForTesting";
import { FluentValidatorCollector } from "../../src/ValueHosts/Fluent";
import { CapturingLogger } from "../TestSupport/CapturingLogger";

interface ITestSetupConfig {
    services: MockValidationServices,
    validationManager: MockValidationManager,
    config: InputValueHostConfig,
    state: InputValueHostInstanceState,
    valueHost: InputValueHost
};

function createInputValueHostConfig(fieldNumber: number = 1,
    dataType: string = LookupKey.String,
    initialValue?: any): InputValueHostConfig {
    return {
        name: 'Field' + fieldNumber,
        label: 'Label' + fieldNumber,
        valueHostType: ValueHostType.Input,
        dataType: dataType,
        initialValue: initialValue,
        validatorConfigs: []
    };
}

function finishPartialInputValueHostConfig(partialConfig: Partial<InputValueHostConfig> | null):
    InputValueHostConfig {
    let defaultIVH = createInputValueHostConfig(1, LookupKey.String);
    if (partialConfig) {
        return { ...defaultIVH, ...partialConfig };
    }
    return defaultIVH;
}

function finishPartialInputValueHostConfigs(partialConfigs: Array<Partial<InputValueHostConfig>> | null):
    Array<InputValueHostConfig> | null {
    let result: Array<InputValueHostConfig> = [];
    if (partialConfigs) {
        for (let i = 0; i < partialConfigs.length; i++) {
            let vhd = partialConfigs[i];
            result.push(finishPartialInputValueHostConfig(vhd));
        }
    }

    return result;
}


function createValidatorConfig(condConfig: ConditionConfig | null): ValidatorConfig {
    return {
        conditionConfig: condConfig,
        errorMessage: 'Local',
        summaryMessage: 'Summary',
    };
}
function finishPartialValidatorConfig(validatorConfig: Partial<ValidatorConfig> | null):
    ValidatorConfig {
    let defaultIVD = createValidatorConfig(null);
    if (validatorConfig) {
        return { ...defaultIVD, ...validatorConfig };
    }
    return defaultIVD;
}

function finishPartialValidatorConfigs(validatorConfigs: Array<Partial<ValidatorConfig>> | null):
    Array<ValidatorConfig> {
    let result: Array<ValidatorConfig> = [];
    if (validatorConfigs) {
        let defaultIVD = createValidatorConfig(null);
        for (let i = 0; i < validatorConfigs.length; i++) {
            let vd = validatorConfigs[i];
            result.push(finishPartialValidatorConfig(vd));
        }
    }

    return result;
}

function createInputValueHostInstanceState(fieldNumber: number = 1): InputValueHostInstanceState {
    return {
        name: 'Field' + fieldNumber,
        value: undefined,
        inputValue: undefined,
        issuesFound: null,
        status: ValidationStatus.NotAttempted
    };
}
function finishPartialInputValueHostInstanceState(partialState: Partial<InputValueHostInstanceState> | null): InputValueHostInstanceState {
    let defaultIVS = createInputValueHostInstanceState(1);
    if (partialState) {
        return { ...defaultIVS, ...partialState };
    }
    return defaultIVS;
}

/**
 * Returns an ValueHost (PublicifiedValueHost subclass) ready for testing.
 * @param partialIVHConfig - Provide just the properties that you want to test.
 * Any not supplied but are required will be assigned using these rules:
 * name: 'Field1',
 * label: 'Label1',
 * valueHostType: 'Input',
 * DataType: LookupKey.String,
 * InitialValue: 'DATA'
 * validatorConfigs: []
 * @param partialState - Use the default state by passing null. Otherwise pass
 * a state. Your state will override default values. To avoid overriding,
 * pass the property with a value of undefined.
 * These are the default values
 * name: 'Field1'
 * Value: undefined
 * InputValue: undefined
 * IssuesFound: null,
 * ValidationStatus: NotAttempted
 * @returns An object with all of the parts that were setup including 
 * ValidationManager, Services, ValueHosts, the complete Config,
 * and the state.
 */
function setupInputValueHost(
    partialIVHConfig?: Partial<InputValueHostConfig> | null,
    partialState?: Partial<InputValueHostInstanceState> | null): ITestSetupConfig {
    let services = new MockValidationServices(true, true);
    let vm = new MockValidationManager(services);
    let updatedConfig = finishPartialInputValueHostConfig(partialIVHConfig ?? null);
    let updatedState = finishPartialInputValueHostInstanceState(partialState ?? null);

    let vh = vm.addInputValueHostWithConfig(updatedConfig, updatedState);
    //new InputValueHost(vm, updatedConfig, updatedState);
    return {
        services: services,
        validationManager: vm,
        config: updatedConfig,
        state: updatedState,
        valueHost: vh as InputValueHost
    };
}

/**
 * Creates a configuration where you can call validate() and test various results.
 * @param partialValidatorConfigs - Always provide a list of the validatorConfigs in the desired order.
 * If null, no validators are made available to validate
 * @param partialInputValueState - Use to supply initial InputValue and Value properties. Any property
 * not supplied will be provided.
 * @returns Configuration that has been setup. Use valueHost to invoke validation functions.
 */
function setupInputValueHostForValidate(
    partialValidatorConfigs: Array<Partial<ValidatorConfig>> | null,
    partialInputValueState: Partial<InputValueHostInstanceState> | null,
    vhGroup?: string | null): ITestSetupConfig {

    let inputValueConfig: Partial<InputValueHostConfig> = {
        validatorConfigs: partialValidatorConfigs ?
            finishPartialValidatorConfigs(partialValidatorConfigs) :
            undefined
    };
    if (vhGroup !== undefined)
        inputValueConfig.group = vhGroup;

    let updatedState = finishPartialInputValueHostInstanceState(
        { ...{ inputValue: '' }, ...partialInputValueState });

    return setupInputValueHost(inputValueConfig, updatedState);
}

describe('constructor and resulting property values', () => {

    test('constructor with valid parameters created and sets up Services, Config, and InstanceState', () => {
        let services = new MockValidationServices(true, true);
        let vm = new MockValidationManager(services);
        let testItem: InputValueHost | null = null;
        expect(()=> testItem = new InputValueHost(vm, {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            validatorConfigs: []
            },
            {
                name: 'Field1',
                status: ValidationStatus.NotAttempted,
                issuesFound: null,
                value: undefined
            })).not.toThrow();

        expect(testItem!.valueHostsManager).toBe(vm);

        expect(testItem!.getName()).toBe('Field1');
        expect(testItem!.getLabel()).toBe('');
        expect(testItem!.getDataType()).toBeNull();
        expect(testItem!.getValue()).toBeUndefined();
        expect(testItem!.isChanged).toBe(false);
        expect(testItem!.isValid).toBe(true);
        expect(testItem!.requiresInput).toBe(false);
        expect(testItem!.getConversionErrorMessage()).toBeNull();
    });
});

describe('setValue', () => {

    test('ConversionErrorTokenValue supplied and is ignored by setValue.', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValue(undefined, { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBe('ERROR');
    });
    test('ConversionErrorTokenValue supplied but is not saved because value is defined', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValue(10, { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
    });
    test('ConversionErrorTokenValue supplied in one call which saves it but a follow up call without it abandons it', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValue(undefined, { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        setup.valueHost.setValue(10, { conversionErrorTokenValue: 'ERROR' });
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
    });
    test('Use both ConversionErrorTokenValue and Reset options will setup the error message and IsChanged is false', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValue(undefined, { conversionErrorTokenValue: 'ERROR', reset: true })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
        expect(setup.valueHost.isChanged).toBe(false);
    });
    test('Value was changed. OnValueChanged called. (confirm ancestor was not broken)', () => {
        let setup = setupInputValueHost();
        let testItem = setup.valueHost;

        let callbackInvoked = 0;
        setup.validationManager.onValueChanged = (valueHost, oldValue) => {
            callbackInvoked++;
        };
        testItem.setValue(100);
        expect(callbackInvoked).toBe(1);

    });

    test('Value was changed. OnValueHostInstanceStateChanged called.(confirm ancestor was not broken) ', () => {
        const initialValue = 100;

        let setup = setupInputValueHost();
        let callbackInvoked = 0;
        setup.validationManager.onValueHostInstanceStateChanged = (valueHost, stateToRetain) => {
            callbackInvoked++;
        };        
        let testItem = setup.valueHost;
        testItem.setValue(initialValue);

        expect(callbackInvoked).toBe(1);
    });

});
describe('InputValueHost.getInputValue', () => {
    test('Set instanceState.InputValue to undefined; getInputValue is undefined', () => {
        let setup = setupInputValueHost(null, {
            inputValue: undefined
        });
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.NotAttempted);
        let value: any = null;
        expect(() => value = setup.valueHost.getInputValue()).not.toThrow();
        expect(value).toBeUndefined();
    });
    test('Set instanceState.InputValue to null; getInputValue is null', () => {
        let setup = setupInputValueHost(null, {
            inputValue: null
        });
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.NotAttempted);
        let value: any = null;
        expect(() => value = setup.valueHost.getInputValue()).not.toThrow();
        expect(value).toBeNull();
    });
    test('Set instanceState.InputValue to "abc"; getInputValue is "abc"', () => {
        let setup = setupInputValueHost(null, {
            inputValue: 'abc'
        });
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.NotAttempted);
        let value: any = null;
        expect(() => value = setup.valueHost.getInputValue()).not.toThrow();
        expect(value).toBe('abc');
    });

});

describe('setInputValue with getInputValue to check result', () => {
    test('Value of "ABC", options is undefined. Sets value to "ABC" and does not validate. IsChanged is true', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setInputValue("ABC")).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getInputValue()).toBe("ABC");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("ABC");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('Value of "ABC", options is empty object. Sets value to "ABC" and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setInputValue("ABC", {})).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getInputValue()).toBe("ABC");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("ABC");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('Value of "ABC", options is null. Sets value to "ABC" and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setInputValue("ABC", null!)).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getInputValue()).toBe("ABC");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("ABC");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('Value of "ABC", options is { validate: false }. Sets value to "ABC" and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setInputValue("ABC", { validate: false })).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getInputValue()).toBe("ABC");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("ABC");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('Value of "ABC", options is { validate: true }. Sets value to "ABC" and validate (no Validators to cause Invalid, so result is Undetermined)', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setInputValue("ABC", { validate: true })).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.Undetermined);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getInputValue()).toBe("ABC");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(2); // first changes the value; second changes ValidationStatus
        let valueChange = <InputValueHostInstanceState>changes[0];
        expect(valueChange.inputValue).toBe("ABC");
        let vrChange = <InputValueHostInstanceState>changes[1];
        expect(vrChange.status).toBe(ValidationStatus.Undetermined);
        expect(vrChange.changeCounter).toBe(1);
    });
    test('Before calling, validate for ValidationStatus=Undetermined. Set value to 10 with options { Reset: true }. Expect value to be 20, IsChanged = false, and ValidationStatus to NotAttempted', () => {
        let setup = setupInputValueHost();

        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.NotAttempted);
        setup.valueHost.validate();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.Undetermined);
        expect(() => setup.valueHost.setInputValue('ABC', { reset: true })).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.NotAttempted);
        expect(setup.valueHost.getIssuesFound()).toBeNull();
        expect(setup.valueHost.isChanged).toBe(false);
    });
    test('ConversionErrorTokenValue supplied and is applied because native value is undefined', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setInputValue("ABC", { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBe('ERROR');
    });
    test('ConversionErrorTokenValue supplied and is ignored because native value is defined', () => {
        let setup = setupInputValueHost();
        setup.valueHost.setValue('ABC');
        expect(() => setup.valueHost.setInputValue("ABC", { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
    });    
    test('ConversionErrorTokenValue supplied in previous setValueToUndefined, and retained by SetInputValue despite not setting native value here', () => {
        let setup = setupInputValueHost();

        setup.valueHost.setValueToUndefined({ conversionErrorTokenValue: 'ERROR' });

        expect(() => setup.valueHost.setInputValue("ABC", { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBe('ERROR');
    });
});

describe('InputValueHost.setValues with getInputValue and getValue to check result', () => {
    test('InputValue of "10", Value of 10, options is undefined. Sets both values, IsChanged = true, and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(10, "10")).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getValue()).toBe(10);
        expect(setup.valueHost.getInputValue()).toBe("10");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).value).toBe(10);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("10");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
    });
    test('InputValue of "10", Value of 10, options is empty object. Sets both values, IsChanged = true, and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(10, "10", {})).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getValue()).toBe(10);
        expect(setup.valueHost.getInputValue()).toBe("10");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).value).toBe(10);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("10");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('InputValue of "10", Value of 10, options is null. Sets both values, IsChanged = true, and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(10, "10", null!)).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getValue()).toBe(10);
        expect(setup.valueHost.getInputValue()).toBe("10");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).value).toBe(10);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("10");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('InputValue of "10", Value of 10, options is { validate: false }. Sets both values, IsChanged = true, and does not validate', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(10, "10", { validate: false })).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.ValueChangedButUnvalidated);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getValue()).toBe(10);
        expect(setup.valueHost.getInputValue()).toBe("10");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(1);
        expect((<InputValueHostInstanceState>changes[0]).value).toBe(10);
        expect((<InputValueHostInstanceState>changes[0]).inputValue).toBe("10");
        expect((<InputValueHostInstanceState>changes[0]).changeCounter).toBe(1);
    });
    test('InputValue of "10", Value of 10, options is { validate: true }. Sets both values, IsChanged = true, and validate (no Validators to cause Invalid, so result is Undetermined)', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(10, "10", { validate: true })).not.toThrow();
        expect(setup.valueHost.validationStatus).toBe(ValidationStatus.Undetermined);
        expect(setup.valueHost.isChanged).toBe(true);
        expect(setup.valueHost.getValue()).toBe(10);
        expect(setup.valueHost.getInputValue()).toBe("10");
        let changes = setup.validationManager.getHostStateChanges();
        expect(changes.length).toBe(2); // first changes the value; second changes ValidationStatus
        let valueChange = <InputValueHostInstanceState>changes[0];
        expect(valueChange.value).toBe(10);
        expect(valueChange.inputValue).toBe("10");
        let vrChange = <InputValueHostInstanceState>changes[1];
        expect(vrChange.status).toBe(ValidationStatus.Undetermined);
        expect(vrChange.changeCounter).toBe(1);
    });

    test('ConversionErrorTokenValue supplied and is saved because native value is undefined', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(undefined, "ABC", { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBe('ERROR');
        expect(setup.valueHost.isChanged).toBe(true);
    });
    test('ConversionErrorTokenValue supplied but is not saved because native value is defined', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(10, "10", { conversionErrorTokenValue: 'ERROR' })).not.toThrow();
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
    });
    test('ConversionErrorTokenValue supplied in one call which saves it but a follow up call without it abandons it', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(undefined, { ConversionErrorTokenValue: 'ERROR' })).not.toThrow();
        setup.valueHost.setValues(10, "10", { conversionErrorTokenValue: 'ERROR' });
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
    });
    test('ConversionErrorTokenValue and Reset supplied on second call. errorMessage is null and IsChanged is false.', () => {
        let setup = setupInputValueHost();

        expect(() => setup.valueHost.setValues(undefined, { ConversionErrorTokenValue: 'ERROR' })).not.toThrow();
        setup.valueHost.setValues(10, "10", { conversionErrorTokenValue: 'ERROR', reset: true });
        expect(setup.valueHost.getConversionErrorMessage()).toBeNull();
        expect(setup.valueHost.isChanged).toBe(false);
    });
});

describe('InputValueHost.getValidator', () => {
    test('Request errorCode without any validators setup return null', () => {
        let setup = setupInputValueHost();
        expect(setup.valueHost.getValidator('anything')).toBeNull();
    });

    test('With 1 validator registered, request its errorCode. Returns the correct Validator', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: ConditionType.RequireText
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        let result = setup.valueHost.getValidator(ConditionType.RequireText);
        expect(result).toBeInstanceOf(Validator);
        expect((result as Validator).errorCode).toBe(ConditionType.RequireText);
    });
    test('With 1 validator registered, request a different errorCode. Returns null', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: ConditionType.RequireText
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        (setup.services.conditionFactory as ConditionFactory).register<RegExpConditionConfig>(
            ConditionType.RegExp, (config) => new RegExpCondition(config));
        let result = setup.valueHost.getValidator(ConditionType.RegExp);
        expect(result).toBeNull();
    });
    test('With 4 validators registered, request each and it returns the correct Validator', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: ConditionType.RequireText
                }
            },
            {
                conditionConfig: {
                    conditionType: ConditionType.RegExp
                }
            },
            {
                conditionConfig: {
                    conditionType: ConditionType.StringLength
                }
            },
            {
                conditionConfig: {
                    conditionType: ConditionType.All
                }
            },
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        let cf = setup.services.conditionFactory as ConditionFactory;
        cf.register<RegExpConditionConfig>(
            ConditionType.RegExp, (config) => new RegExpCondition(config));
        cf.register<StringLengthConditionConfig>
            (ConditionType.StringLength, (config) => new StringLengthCondition(config));
        cf.register<AllMatchConditionConfig>
            (ConditionType.All, (config) => new AllMatchCondition(config));


        let result = setup.valueHost.getValidator(ConditionType.RequireText);
        expect(result).toBeInstanceOf(Validator);
        expect((result as Validator).errorCode).toBe(ConditionType.RequireText);
        result = setup.valueHost.getValidator(ConditionType.RegExp);
        expect(result).toBeInstanceOf(Validator);
        expect((result as Validator).errorCode).toBe(ConditionType.RegExp);
        result = setup.valueHost.getValidator(ConditionType.StringLength);
        expect(result).toBeInstanceOf(Validator);
        expect((result as Validator).errorCode).toBe(ConditionType.StringLength);
        result = setup.valueHost.getValidator(ConditionType.All);
        expect(result).toBeInstanceOf(Validator);
        expect((result as Validator).errorCode).toBe(ConditionType.All);
        result = setup.valueHost.getValidator('Anything');
        expect(result).toBeNull();
    });
});


describe('InputValueHost.validate uses autogenerated DataTypeCheck condition', () => {
    test('No conditions at all. DataTypeCheckCondition gets added', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        let logger = setup.services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Info;
        setup.services.autoGenerateDataTypeCheckService.enabled = true;
        (setup.services.textLocalizerService as TextLocalizerService).registerErrorMessage(ConditionType.DataTypeCheck, null, {
            '*': 'Error Found'
        });

        let results: Array<ValueHostValidationState> = [];
        setup.validationManager.onValueHostValidated = (valueHost, validateResult) => {
            results.push(validateResult);
        };
        setup.valueHost.setValues(undefined, 'ABC');   // will violate DataTypeCheckCondition
        setup.valueHost.validate();
        expect(results).toEqual([
            <ValueHostValidationState>{
                issuesFound: [{
                    errorCode: ConditionType.DataTypeCheck,
                    valueHostName: 'Field1',
                    severity: ValidationSeverity.Severe,    // due to DataTypeCheck
                    errorMessage: 'Error Found',
                    summaryMessage: 'Error Found'
                }],
                isValid: false,
                doNotSaveNativeValues: true,
                asyncProcessing: false,
                status: ValidationStatus.Invalid
            }
        ]);        

        expect(logger.findMessage('Condition for Data Type Check', LoggingLevel.Info, LoggingCategory.Configuration, 'Validator')).not.toBeNull();
    });
    test('1 condition exists and it is not a DataTypeCheck category. DataTypeCheckCondition gets added', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: AlwaysMatchesConditionType
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        let logger = setup.services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Info;
        setup.services.autoGenerateDataTypeCheckService.enabled = true;
        (setup.services.textLocalizerService as TextLocalizerService).registerErrorMessage(ConditionType.DataTypeCheck, null, {
            '*': 'Error Found'
        });

        let results: Array<ValueHostValidationState> = [];
        setup.validationManager.onValueHostValidated = (valueHost, validateResult) => {
            results.push(validateResult);
        };
        setup.valueHost.setValues(undefined, 'ABC');   // will violate DataTypeCheckCondition
        setup.valueHost.validate();
        expect(results).toEqual([
            <ValueHostValidationState>{
                issuesFound: [{
                    errorCode: ConditionType.DataTypeCheck,
                    valueHostName: 'Field1',
                    severity: ValidationSeverity.Severe,    // due to DataTypeCheck
                    errorMessage: 'Error Found',
                    summaryMessage: 'Error Found'
                }],
                isValid: false,
                doNotSaveNativeValues: true,
                asyncProcessing: false,
                status: ValidationStatus.Invalid
            }
        ]);


        expect(logger.findMessage('Condition for Data Type Check', LoggingLevel.Info, LoggingCategory.Configuration, 'Validator')).not.toBeNull();
    });
    test('1 condition and it is an actual DataTypeCheckCondition. No DataTypeCheckCondition gets added.', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: ConditionType.DataTypeCheck
                },
                errorMessage: null, // so we can use TextLocalizerService
                summaryMessage: null
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        let logger = setup.services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Info;
        setup.services.autoGenerateDataTypeCheckService.enabled = true;
        (setup.services.textLocalizerService as TextLocalizerService).registerErrorMessage(ConditionType.DataTypeCheck, null, {
            '*': 'Error Found'
        });

        let results: Array<ValueHostValidationState> = [];
        setup.validationManager.onValueHostValidated = (valueHost, validateResult) => {
            results.push(validateResult);
        };
        setup.valueHost.setValues(undefined, 'ABC');   // will violate DataTypeCheckCondition
        setup.valueHost.validate();
        expect(results).toEqual([
            <ValueHostValidationState>{
                issuesFound: [{
                    errorCode: ConditionType.DataTypeCheck,
                    valueHostName: 'Field1',
                    severity: ValidationSeverity.Severe,
                    errorMessage: 'Error Found',
                    summaryMessage: 'Error Found'
                }],
                isValid: false,
                doNotSaveNativeValues: true,
                asyncProcessing: false,
                status: ValidationStatus.Invalid
            }
        ]);        

        expect(logger.findMessage('Condition for Data Type Check', LoggingLevel.Info, LoggingCategory.Configuration, 'Validator')).toBeNull(); // proves not auto generated
    });

    test('1 condition and it has ConditionCategory=DataTypeCheck. No DataTypeCheckCondition gets added.', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: <RegExpConditionConfig>{
                    conditionType: ConditionType.RegExp,
                    expressionAsString: '^A$', // will match only "A" and we will supply "ABC"
                    category: ConditionCategory.DataTypeCheck
                },
                errorMessage: null, // so we can use TextLocalizerService
                summaryMessage: null
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {};
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        (setup.services.conditionFactory as ConditionFactory).register<RegExpConditionConfig>(
            ConditionType.RegExp, (config) => new RegExpCondition(config));
        let logger = setup.services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Info;
        setup.services.autoGenerateDataTypeCheckService.enabled = true;
        (setup.services.textLocalizerService as TextLocalizerService).registerErrorMessage(ConditionType.RegExp, null, {
            '*': 'Error Found'
        });
        let results: Array<ValueHostValidationState> = [];
        setup.validationManager.onValueHostValidated = (valueHost, validateResult) => {
            results.push(validateResult);
        };
        setup.valueHost.setValues('ABC', 'ABC');   // will violate the regexp
        setup.valueHost.validate();
        expect(results).toEqual([
            <ValueHostValidationState>{
                issuesFound: [{
                    errorCode: ConditionType.RegExp,
                    valueHostName: 'Field1',
                    severity: ValidationSeverity.Severe,    // due to regexp
                    errorMessage: 'Error Found',
                    summaryMessage: 'Error Found'
                }],
                isValid: false,
                doNotSaveNativeValues: true,
                asyncProcessing: false,
                status: ValidationStatus.Invalid
            }
        ]);        

        expect(logger.findMessage('Condition for Data Type Check', LoggingLevel.Info, LoggingCategory.Configuration, 'Validator')).toBeNull(); // proves not auto generated
    });
    test('Register a DataTypeCheckCondition for PhoneNumber and ensure it gets autogenerated and used', () => {
        const phoneNumberLookupKey = 'PhoneNumber';
        const phoneNumberConditionType = 'PhoneNumber';
        class PhoneNumberDataTypeCheckGenerator implements IDataTypeCheckGenerator {
            supportsValue(dataTypeLookupKey: string): boolean {
                return dataTypeLookupKey === phoneNumberLookupKey;
            }
            createCondition(valueHost: IInputValueHost, dataTypeLookupKey: string, conditionFactory: IConditionFactory): ICondition | null {
                return new RegExpCondition({
                    conditionType: phoneNumberConditionType,
                    expression: /^\d\d\d \d\d\d\-\d{4}$/, // ### ###-####
                    valueHostName: null
                });
            }

        }
        let services = new MockValidationServices(true, true);
        let logger = services.loggerService as CapturingLogger;
        logger.minLevel = LoggingLevel.Info;
        services.autoGenerateDataTypeCheckService.enabled = true;
        (services.autoGenerateDataTypeCheckService as AutoGenerateDataTypeCheckService).
            register(new PhoneNumberDataTypeCheckGenerator());

        (services.textLocalizerService as TextLocalizerService).
            registerErrorMessage(phoneNumberConditionType, null,
                {
                    '*': 'Error Found'
                });

        let configs: Array<ValueHostConfig> = [
            <InputValueHostConfig>{
                valueHostType: ValueHostType.Input,
                name: 'Field1',
                dataType: phoneNumberLookupKey,
                validatorConfigs: []
            }
        ];

        let results: Array<ValueHostValidationState> = [];        
        let vmConfig: ValidationManagerConfig = {
            services: services,
            valueHostConfigs: configs,
            onValueHostValidated: (valueHost, validateResult) => {
                results.push(validateResult);
            }
        };
        let vm = new ValidationManager(vmConfig);
        let vh = vm.getValueHost('Field1') as InputValueHost;     
        vh.setValues('ABC', 'ABC');   // will violate the regexp
        vh.validate();
        expect(results).toEqual([
            <ValueHostValidationState>{
                issuesFound: [{
                    errorCode: phoneNumberConditionType,
                    valueHostName: 'Field1',
                    severity: ValidationSeverity.Severe, // due to regexp
                    errorMessage: 'Error Found',
                    summaryMessage: 'Error Found'
                }],
                isValid: false,
                doNotSaveNativeValues: true,
                asyncProcessing: false,
                status: ValidationStatus.Invalid
            }
        ]);        

        expect(logger.findMessage('PhoneNumber Condition for Data Type Check', LoggingLevel.Info, LoggingCategory.Configuration, 'Validator')).not.toBeNull();
    });

});

// doNotSaveNativeValue(): boolean
describe('InputValueHost.doNotSaveNativeValue', () => {
    function trydoNotSaveNativeValue(initialValidationStatusCode: ValidationStatus, hasPendings: boolean, expectedResult: boolean): void {
        let ivConfig: ValidatorConfig = {
            conditionConfig: { conditionType: NeverMatchesConditionType },
            errorMessage: ''
        };
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            ivConfig
        ];
        let state: Partial<InputValueHostInstanceState> = {
            name: 'Field1',
            status: initialValidationStatusCode,
            issuesFound: [],
            asyncProcessing: hasPendings
        };

        let setup = setupInputValueHostForValidate(ivConfigs, state);

        expect(setup.valueHost.doNotSaveNativeValue()).toBe(expectedResult);
    }
    test('ValidationStatus = Valid, doNotSaveNativeValue=false', () => {
        trydoNotSaveNativeValue(ValidationStatus.Valid, false, false);
    });
    test('ValidationStatus = Undetermined, doNotSaveNativeValue=false', () => {
        trydoNotSaveNativeValue(ValidationStatus.Undetermined, false, false);
    });
    test('ValidationStatus = Invalid, doNotSaveNativeValue=true', () => {
        trydoNotSaveNativeValue(ValidationStatus.Invalid, false, true);
    });
    test('ValidationStatus = Valid but with async pending, doNotSaveNativeValue=true', () => {
        trydoNotSaveNativeValue(ValidationStatus.Valid, true, true);
    });
    test('ValidationStatus = ValueChangedButUnvalidated, doNotSaveNativeValue=true', () => {
        trydoNotSaveNativeValue(ValidationStatus.ValueChangedButUnvalidated, false, true);
    });

});

describe('toIInputValueHost', () => {
    test('Real instance match', () => {
        let vm = new MockValidationManager(new MockValidationServices(false, false));
        let testItem = new InputValueHost(vm, {
            name: 'Field1',
            validatorConfigs: [],
        }, {
            name: 'Field1',
            issuesFound: null,
            value: null,
            status: ValidationStatus.Undetermined
        });
        expect(toIInputValueHost(testItem)).toBe(testItem);
    });
    test('Compatible object match', () => {
        let testItem: IInputValueHost = {
            getInputValue: function () {
                throw new Error('Function not implemented.');
            },
            setInputValue: function (value: any, options?: SetValueOptions | undefined): void {
                throw new Error('Function not implemented.');
            },
            setValues: function (nativeValue: any, inputValue: any, options?: SetValueOptions | undefined): void {
                throw new Error('Function not implemented.');
            },
            otherValueHostChangedNotification: function (valueHostIdThatChanged: string, revalidate: boolean): void {
                throw new Error('Function not implemented.');
            },
            validate: function (options?: ValidateOptions | undefined): ValueHostValidateResult {
                throw new Error('Function not implemented.');
            },
            clearValidation: function (): boolean {
                throw new Error('Function not implemented.');
            },
            isValid: false,
            validationStatus: ValidationStatus.NotAttempted,
            asyncProcessing: false,
            setBusinessLogicError: function (error: BusinessLogicError): boolean {
                throw new Error('Function not implemented.');
            },
            clearBusinessLogicErrors: function (): boolean {
                throw new Error('Function not implemented.');
            },
            doNotSaveNativeValue: function (): boolean {
                throw new Error('Function not implemented.');
            },

            getIssueFound(errorCode: string): IssueFound | null {
                throw new Error('Function not implemented.');
            },
            getIssuesFound: function (group?: string | undefined): IssueFound[] {
                throw new Error('Function not implemented.');
            },
            getConversionErrorMessage: function (): string | null {
                throw new Error('Function not implemented.');
            },
            requiresInput: false,
            getLabel: function (): string {
                throw new Error('Function not implemented.');
            },
            setLabel: function (label: string, labell10n?: string | undefined): void {
                throw new Error('Function not implemented.');
            },
            getValue: function () {
                throw new Error('Function not implemented.');
            },
            setValue: function (value: any, options?: SetValueOptions | undefined): void {
                throw new Error('Function not implemented.');
            },
            setValueToUndefined: function (options?: SetValueOptions | undefined): void {
                throw new Error('Function not implemented.');
            },
            getDataType: function (): string | null {
                throw new Error('Function not implemented.');
            },
            saveIntoInstanceState: function (key: string, value: any): void {
                throw new Error('Function not implemented.');
            },
            getFromInstanceState: function (key: string) {
                throw new Error('Function not implemented.');
            },
            isChanged: false,
            addValidator: function (config: ValidatorConfig): void {
                throw new Error('Function not implemented.');
            },
            getName: function (): string {
                throw new Error('Function not implemented.');
            },
            getValidator: function (errorCode: string): IValidator | null {
                throw new Error("Function not implemented.");
            },
            setGroup: function (group: string): void {
                throw new Error('Function not implemented.');
            },
            configValidators: function (): FluentValidatorCollector {
                throw new Error("Function not implemented.");
            },
            gatherValueHostNames: function (collection: Set<string>, valueHostResolver: IValueHostResolver): void {
                throw new Error("Function not implemented.");
            }
        }
        expect(toIInputValueHost(testItem)).toBe(testItem);
    });
    test('Wrong instance class returns null', () => {
        let vm = new MockValidationManager(new MockValidationServices(false, false));
        let vh = new StaticValueHost(vm, {
            name: 'Field1',
        }, {
            name: 'Field1',
            value: null,
        });
        expect(toIInputValueHost(new Date())).toBeNull();
        expect(toIInputValueHost(vh)).toBeNull();
    });
    test('Wrong plain old object returns null', () => {
        expect(toIInputValueHost({})).toBeNull();
        expect(toIInputValueHost({ getName: null })).toBeNull();
    });
});

describe('InputValueHostGenerator members', () => {
    test('CanCreate returns true for ValueHostType.Input', () => {
        let testItem = new InputValueHostGenerator();
        expect(testItem.canCreate({
            valueHostType: ValueHostType.Input,
            name: 'Field1',
            label: '',
            validatorConfigs: null
        })).toBe(true);
    });
    test('CanCreate returns false for unexpected type', () => {
        let testItem = new InputValueHostGenerator();
        expect(testItem.canCreate({
            valueHostType: 'Unexpected',
            name: 'Field1',
            label: '',
            validatorConfigs: null
        })).toBe(false);
    });

    test('CanCreate returns true for Type not defined and presence of ValidationConfig property (using null as a value)', () => {
        let testItem = new InputValueHostGenerator();
        expect(testItem.canCreate(<any>{
            name: 'Field1',
            label: '',
            validatorConfigs: null
        })).toBe(true);
    });
    test('CanCreate returns true for Type not defined and presence of ValidationConfig property using [] as a value', () => {
        let testItem = new InputValueHostGenerator();
        expect(testItem.canCreate(<any>{
            name: 'Field1',
            label: '',
            validatorConfigs: []
        })).toBe(true);
    });
    test('CanCreate returns false for Type not defined and lack of ValidationConfig property', () => {
        let testItem = new InputValueHostGenerator();
        expect(testItem.canCreate(<any>{
            name: 'Field1',
            label: ''
        })).toBe(false);
    });

    test('CanCreate returns false for Type=undefined and lack of ValidationConfig property', () => {
        let testItem = new InputValueHostGenerator();
        expect(testItem.canCreate(<any>{
            Type: undefined,
            name: 'Field1',
            label: ''
        })).toBe(false);
    });

    test('create returns instance of InputValueHost with VM, Config and State established', () => {
        let services = new MockValidationServices(false, false);
        let vm = new MockValidationManager(services);
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: null
        };
        let state: InputValueHostInstanceState = {
            name: 'Field1',
            issuesFound: null,
            status: ValidationStatus.NotAttempted,
            value: undefined,
            inputValue: 'TEST'
        };
        let testItem = new InputValueHostGenerator();
        let vh: IInputValueHost | null = null;
        expect(() => vh = testItem.create(vm, config, state)).not.toThrow();
        expect(vh).not.toBeNull();
        expect(vh).toBeInstanceOf(InputValueHost);
        expect(vh!.getName()).toBe(config.name);    // check Config value
        expect(vh!.getInputValue()).toBe('TEST');  // check instanceState value
    });
    test('cleanupInstanceState existing state has no IssuesFound. Returns the same data', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            issuesFound: null,
            status: ValidationStatus.Valid,
            inputValue: 'ABC',
            value: 10
        };
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: null
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        expect(state).toEqual(originalState);
    });
    test('Using ConditionConfig, cleanupInstanceState existing state has no IssuesFound but there is a new ValidationConfig which has no impact. Returns the same data', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            issuesFound: null,
            status: ValidationStatus.Valid,
            inputValue: 'ABC',
            value: 10
        };
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: <RequireTextConditionConfig>{
                        conditionType: ConditionType.RequireText,
                        valueHostName: null
                    },
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        expect(state).toEqual(originalState);
    });
    test('Using ConditionCreator, cleanupInstanceState existing state has no IssuesFound but there is a new ValidationConfig which has no impact. Returns the same data', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            issuesFound: null,
            status: ValidationStatus.Valid,
            inputValue: 'ABC',
            value: 10
        };
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionCreator: (requestor) => new RequireTextCondition({ conditionType: ConditionType.RequireText, valueHostName: 'Field1' }),
                    conditionConfig: null,
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        expect(state).toEqual(originalState);
    });
    test('Using ConditionConfig, cleanupInstanceState existing state with ValidationStatus.Error has an IssuesFound and there is a ValidatorConfig. instanceState.IssuesFound unchanged', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Invalid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound?.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: <RequireTextConditionConfig>{
                        conditionType: ConditionType.RequireText,
                        valueHostName: 'Field1'
                    },
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        expect(state).toEqual(originalState);
    });
    test('Using ConditionCreator, cleanupInstanceState existing state with ValidationStatus.Error has an IssuesFound and there is a ValidatorConfig. instanceState.IssuesFound unchanged', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Invalid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound?.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionCreator: (requestor) => new RequireTextCondition({ conditionType: ConditionType.RequireText, valueHostName: 'Field1' }),
                    conditionConfig: null,
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        expect(state).toEqual(originalState);
    });
    test('Using ConditionConfig, cleanupInstanceState existing state has an IssuesFound but no associated ValidationConfig. instanceState.IssuesFound is null', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Valid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Warning,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: <RangeConditionConfig>{
                        conditionType: ConditionType.Range,   // different type from in InstanceState
                        valueHostName: 'Field1'
                    },
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        let expectedState = { ...originalState };
        expectedState.issuesFound = null;
        expect(state).toEqual(expectedState);
    });
    test('Using ConditionCreator, cleanupInstanceState existing state has an IssuesFound but no associated ValidationConfig. instanceState.IssuesFound is null', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Valid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Warning,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionCreator: (requestor) => new NeverMatchesCondition({ conditionType: NeverMatchesConditionType }),
                    conditionConfig: null,
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        let expectedState = { ...originalState };
        expectedState.issuesFound = null;
        expect(state).toEqual(expectedState);
    });

    test('cleanupInstanceState existing state with ValidationStatus=Invalid has an IssuesFound but no associated ValidationConfig. instanceState.IssuesFound is null and ValidationStatus is ValueChangedButUnvalidated', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Invalid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: <RangeConditionConfig>{
                        conditionType: ConditionType.Range,   // different type from in InstanceState
                        valueHostName: 'Field1'
                    },
                    errorMessage: ''
                }
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        let expectedState = { ...originalState };
        expectedState.issuesFound = null;
        expectedState.status = ValidationStatus.ValueChangedButUnvalidated;
        expect(state).toEqual(expectedState);
    });
    test('cleanupInstanceState existing state with ValidationStatus=Invalid, 2 IssuesFound where one is Warning and the other is removed. State.IssuesFound is the warning and ValidationStatus is Valid', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Invalid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: NeverMatchesConditionType,
            errorMessage: '',
            severity: ValidationSeverity.Warning,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: {
                        conditionType: NeverMatchesConditionType
                    },
                    errorMessage: ''
                }
                // we've abandoned ConditionType.RequireText which was severity=Error
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        let expectedState = { ...originalState };
        expectedState.issuesFound!.splice(0, 1);
        expectedState.status = ValidationStatus.Valid;
        expect(state).toEqual(expectedState);
    });
    test('cleanupInstanceState existing state with ValidationStatus=Invalid, 3 IssuesFound (Error, Warning, Error) and one Error is removed. State.IssuesFound is the warning and the remaining error and ValidationStatus is Invalid', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Invalid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: NeverMatchesConditionType,
            errorMessage: '',
            severity: ValidationSeverity.Warning,
            summaryMessage: ''
        });
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.Range,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: {
                        conditionType: NeverMatchesConditionType
                    },
                    errorMessage: ''
                },
                {
                    conditionConfig: <RangeConditionConfig>{
                        conditionType: ConditionType.Range,
                        valueHostName: null
                    },
                    errorMessage: ''
                }
                // we've abandoned ConditionType.RequireText which was severity=Error
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        let expectedState = { ...originalState };
        expectedState.issuesFound!.splice(0, 1);
        expectedState.status = ValidationStatus.Invalid;
        expect(state).toEqual(expectedState);
    });
    test('cleanupInstanceState existing state with ValidationStatus=Invalid, 3 IssuesFound (Error, Warning, Severe) where Error is removed. State.IssuesFound is Warning, Severe and ValidationStatus is Invalid', () => {
        let originalState: InputValueHostInstanceState = {
            name: 'Field1',
            status: ValidationStatus.Invalid,
            inputValue: 'ABC',
            value: 10,
            issuesFound: [],
        };
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.RequireText,
            errorMessage: '',
            severity: ValidationSeverity.Error,
            summaryMessage: ''
        });
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: NeverMatchesConditionType,
            errorMessage: '',
            severity: ValidationSeverity.Warning,
            summaryMessage: ''
        });
        originalState.issuesFound!.push({
            valueHostName: 'Field1',
            errorCode: ConditionType.Range,
            errorMessage: '',
            severity: ValidationSeverity.Severe,
            summaryMessage: ''
        });
        let state = { ...originalState };
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            validatorConfigs: [
                {
                    conditionConfig: {
                        conditionType: NeverMatchesConditionType
                    },
                    errorMessage: ''
                },
                {
                    conditionConfig: <RangeConditionConfig>{
                        conditionType: ConditionType.Range,
                        valueHostName: null
                    },
                    errorMessage: ''
                }
                // we've abandoned ConditionType.RequireText which was severity=Error
            ]
        };
        let testItem = new InputValueHostGenerator();
        expect(() => testItem.cleanupInstanceState(state, config)).not.toThrow();
        let expectedState = { ...originalState };
        expectedState.issuesFound!.splice(0, 1);
        expectedState.status = ValidationStatus.Invalid;
        expect(state).toEqual(expectedState);
    });
    test('createInstanceState returns instance with name and InitialValue from Config', () => {
        let testItem = new InputValueHostGenerator();
        let config: InputValueHostConfig = {
            name: 'Field1',
            valueHostType: ValueHostType.Input,
            label: '',
            initialValue: 'TEST',
            validatorConfigs: [
                {
                    conditionConfig: <RequireTextConditionConfig>{
                        conditionType: ConditionType.RequireText,
                        valueHostName: 'Field1'
                    },
                    errorMessage: '',
                }
            ]
        };
        let state: InputValueHostInstanceState | null = null;
        expect(() => state = testItem.createInstanceState(config)).not.toThrow();
        expect(state).not.toBeNull();
        expect(state!.name).toBe(config.name);
        expect(state!.status).toBe(ValidationStatus.NotAttempted);
        expect(state!.inputValue).toBeUndefined();
        expect(state!.group).toBeUndefined();
        expect(state!.value).toBe(config.initialValue);
        expect(state!.issuesFound).toBeNull();
    });
});
describe('InputValueHost.requiresInput', () => {
    test('Has a RequireTextCondition. requiresInput returns true', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: ConditionType.RequireText
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {
        };
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        expect(setup.valueHost.requiresInput).toBe(true);
    });
    test('Has a custom condition with Category=Require. requiresInput returns true', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: UserSuppliedResultConditionType,
                    category: ConditionCategory.Require
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {
        };
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        expect(setup.valueHost.requiresInput).toBe(true);
    });    
    test('Lacks a condition with category=Require. requiresInput returns false', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: ConditionType.DataTypeCheck
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {
        };
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        expect(setup.valueHost.requiresInput).toBe(false);
    });
    test('Has a RequireTextCondition but its last amongst several. requiresInput returns true', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: NeverMatchesConditionType
                }
            },
            {
                conditionConfig: {
                    conditionType: ConditionType.DataTypeCheck
                }
            },
            {
                conditionConfig: {
                    conditionType: ConditionType.RequireText
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {
        };
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        expect(setup.valueHost.requiresInput).toBe(true);
    });
    test('Has a custom condition with Category=Require but its last amongst several. requiresInput returns true', () => {
        let ivConfigs: Array<Partial<ValidatorConfig>> = [
            {
                conditionConfig: {
                    conditionType: NeverMatchesConditionType
                }
            },
            {
                conditionConfig: {
                    conditionType: ConditionType.DataTypeCheck
                }
            },
            {
                conditionConfig: {
                    conditionType: UserSuppliedResultConditionType,
                    category: ConditionCategory.Require
                }
            }
        ];
        let state: Partial<InputValueHostInstanceState> = {
        };
        let setup = setupInputValueHostForValidate(ivConfigs, state);
        expect(setup.valueHost.requiresInput).toBe(true);
    });    
});

describe('toIInputValueHost function', () => {
    test('Passing actual InputValueHost matches interface returns same object.', () => {
        let vm = new MockValidationManager(new MockValidationServices(false, false));
        let testItem = new InputValueHost(vm, {
            name: 'Field1',
            label: 'Label1',
            validatorConfigs: []
        },
            {
                name: 'Field1',
                value: undefined,
                issuesFound: null,
                status: ValidationStatus.NotAttempted,
                inputValue: undefined
            });
        expect(toIInputValueHost(testItem)).toBe(testItem);
    });
    class TestIInputValueHostImplementation implements IInputValueHost {
        gatherValueHostNames(collection: Set<string>, valueHostResolver: IValueHostResolver): void {
            throw new Error("Method not implemented.");
        }
        configValidators(): FluentValidatorCollector {
            throw new Error("Method not implemented.");
        }

        getInputValue() {
            throw new Error("Method not implemented.");
        }
        setInputValue(value: any, options?: SetValueOptions | undefined): void {
            throw new Error("Method not implemented.");
        }
        setValues(nativeValue: any, inputValue: any, options?: SetValueOptions | undefined): void {
            throw new Error("Method not implemented.");
        }
        otherValueHostChangedNotification(valueHostIdThatChanged: string, revalidate: boolean): void {
            throw new Error("Method not implemented.");
        }
        validate(options?: ValidateOptions | undefined): ValueHostValidateResult {
            throw new Error("Method not implemented.");
        }
        clearValidation(): boolean {
            throw new Error("Method not implemented.");
        }
        isValid: boolean = true;
        validationStatus: ValidationStatus = ValidationStatus.NotAttempted;
        asyncProcessing: boolean = false;
        setBusinessLogicError(error: BusinessLogicError): boolean {
            throw new Error("Method not implemented.");
        }
        clearBusinessLogicErrors(): boolean {
            throw new Error("Method not implemented.");
        }
        doNotSaveNativeValue(): boolean {
            throw new Error("Method not implemented.");
        }
        getIssueFound(errorCode: string): IssueFound | null {
            throw new Error("Method not implemented.");
        }

        getIssuesFound(group?: string | undefined): IssueFound[] {
            throw new Error("Method not implemented.");
        }
        getConversionErrorMessage(): string | null {
            throw new Error("Method not implemented.");
        }
        requiresInput: boolean = false;
        getName(): string {
            throw new Error("Method not implemented.");
        }
        getLabel(): string {
            throw new Error("Method not implemented.");
        }
        setLabel(label: string, labell10n?: string | undefined): void {
            throw new Error("Method not implemented.");
        }
        getValue() {
            throw new Error("Method not implemented.");
        }
        setValue(value: any, options?: SetValueOptions | undefined): void {
            throw new Error("Method not implemented.");
        }
        setValueToUndefined(options?: SetValueOptions | undefined): void {
            throw new Error("Method not implemented.");
        }
        getDataType(): string | null {
            throw new Error("Method not implemented.");
        }

        isChanged: boolean = false;
        saveIntoInstanceState(key: string, value: ValidTypesForInstanceStateStorage | undefined): void {
            throw new Error("Method not implemented.");
        }
        getFromInstanceState(key: string): ValidTypesForInstanceStateStorage | undefined {
            throw new Error("Method not implemented.");
        }
        getValidator(errorCode: string): IValidator | null {
            throw new Error("Method not implemented.");
        }

        addValidator(config: ValidatorConfig): void {
            throw new Error("Method not implemented.");
        }
        setGroup(group: string): void {
            throw new Error("Method not implemented.");
        }
    }
    test('Passing object with interface match returns same object.', () => {
        let testItem = new TestIInputValueHostImplementation();

        expect(toIInputValueHost(testItem)).toBe(testItem);
    });
    test('Non-matching interface returns null.', () => {
        let testItem = {};
        expect(toIInputValueHost(testItem)).toBeNull();
    });
    test('null returns null.', () => {
        expect(toIInputValueHost(null)).toBeNull();
    });
    test('Non-object returns null.', () => {
        expect(toIInputValueHost(100)).toBeNull();
    });
});

describe('toIInputValueHostCallbacks function', () => {
    test('Passing actual InputValueHost matches interface returns same object.', () => {
        let testItem = new MockValidationManager(new MockValidationServices(false, false));

        expect(toIInputValueHostCallbacks(testItem)).toBe(testItem);
    });
    class TestIInputValueHostCallbacksImplementation implements IInputValueHostCallbacks {
        onValueChanged(vh: IValueHost, old: any) { }
        onValueHostInstanceStateChanged(vh: IValueHost, state: ValueHostInstanceState) { }
        onInputValueChanged(vh: IValidatableValueHostBase, old: any) { }
        onValueHostValidated(vh: IValidatableValueHostBase, validationState: ValueHostValidationState) { }
    }
    test('Passing object with interface match returns same object.', () => {
        let testItem = new TestIInputValueHostCallbacksImplementation();

        expect(toIInputValueHostCallbacks(testItem)).toBe(testItem);
    });
    test('Non-matching interface returns null.', () => {
        let testItem = {};
        expect(toIInputValueHostCallbacks(testItem)).toBeNull();
    });
    test('null returns null.', () => {
        expect(toIInputValueHostCallbacks(null)).toBeNull();
    });
    test('Non-object returns null.', () => {
        expect(toIInputValueHostCallbacks(100)).toBeNull();
    });
});